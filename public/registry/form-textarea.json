{
  "name": "form-textarea",
  "type": "registry:block",
  "registryDependencies": [
    "form",
    "textarea"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { Control, FieldPath, FieldValues } from \"react-hook-form\";\r\n\r\nimport {\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { ChangeEvent, ComponentProps } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype TFormTextArea<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TFieldName;\r\n  control: Control<TFieldValues>;\r\n  label?: string | React.ReactNode;\r\n  formLabelProps?: React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>;\r\n  onChangeCallBack?: (e: ChangeEvent<HTMLTextAreaElement>) => void | string;\r\n} & Omit<ComponentProps<typeof Textarea>, \"onChange\" | \"value\">;\r\n\r\nexport const FormTextArea = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  className,\r\n  formLabelProps,\r\n  name,\r\n  control,\r\n  label,\r\n  onChangeCallBack,\r\n  ...props\r\n}: TFormTextArea<TFieldValues, TFieldName>) => {\r\n  return (\r\n    <FormField\r\n      control={control}\r\n      name={name}\r\n      render={({ field: { onChange, ...fieldProps } }) => (\r\n        <FormItem>\r\n          {label && <FormLabel {...formLabelProps}>{label}</FormLabel>}\r\n          <FormControl>\r\n            <Textarea\r\n              className={cn(\r\n                \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aria-invalid:text-destructive aria-invalid:bg-[#FEF2F2]\",\r\n                className\r\n              )}\r\n              {...fieldProps}\r\n              {...props}\r\n              onChange={(e) => {\r\n                if (typeof onChangeCallBack !== \"function\") {\r\n                  onChange(e);\r\n                  return;\r\n                }\r\n\r\n                const formatValue = onChangeCallBack?.(e);\r\n                onChange(typeof formatValue === \"string\" ? formatValue : e);\r\n              }}\r\n            />\r\n          </FormControl>\r\n          <FormMessage />\r\n        </FormItem>\r\n      )}\r\n    />\r\n  );\r\n};\r\n",
      "path": "block/form/form-textarea.tsx",
      "target": "components/block/form/form-textarea.tsx"
    }
  ]
}