{
  "name": "form-date-range-picker",
  "type": "registry:block",
  "registryDependencies": [
    "form",
    "button",
    "calendar",
    "popover"
  ],
  "dependencies": [
    "iconify-icon",
    "@iconify-icon/react"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { format } from \"date-fns\";\r\nimport {\r\n  Control,\r\n  FieldPath,\r\n  FieldValues,\r\n  useForm,\r\n  useFormContext,\r\n  useFormState,\r\n} from \"react-hook-form\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { ComponentProps, useEffect } from \"react\";\r\nimport { DateRange, DayPicker } from \"react-day-picker\";\r\nimport { z } from \"zod\";\r\nimport { MyIconfy } from \"../base-component/my-icon\";\r\nimport { commonIcon } from \"../common-icon\";\r\n\r\ntype TFormDateRangePicker<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  names: [TFieldName, TFieldName];\r\n  control: Control<TFieldValues>;\r\n  label?: string | React.ReactNode;\r\n  placeholder?: string;\r\n  formLabelProps?: React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>;\r\n  onChangeCallBack?: (e: DateRange | undefined) => void;\r\n  required?: boolean;\r\n} & Omit<ComponentProps<typeof DayPicker>, \"selected\" | \"onSelect\" | \"mode\">;\r\n\r\nexport const FormDateRangePicker = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  formLabelProps,\r\n  names,\r\n  control,\r\n  label,\r\n  placeholder = \"Chọn ngày\",\r\n  onChangeCallBack,\r\n  required,\r\n  ...props\r\n}: TFormDateRangePicker<TFieldValues, TFieldName>) => {\r\n  const [fromDateName, toDateName] = names;\r\n  const { isSubmitting } = useFormState({ control });\r\n\r\n  const { setValue, getValues } = useFormContext<TFieldValues>();\r\n\r\n  return (\r\n    <div>\r\n      <FormDateRangePickerPortal\r\n        defaultValues={{\r\n          from: getValues(fromDateName),\r\n          to: getValues(toDateName),\r\n        }}\r\n        isSubmitting={isSubmitting}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        formLabelProps={formLabelProps}\r\n        required={required}\r\n        onChangeCallBack={(range) => {\r\n          onChangeCallBack?.(range);\r\n          setValue(fromDateName, range?.from as TFieldValues[TFieldName]);\r\n          setValue(toDateName, range?.to as TFieldValues[TFieldName]);\r\n        }}\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst dateRangerPickerPortalSchema = z.object({\r\n  dateRange: z.object({ from: z.date(), to: z.date() }),\r\n});\r\n\r\ntype TFormDateRangePickerPortal = {\r\n  defaultValues: { from: Date; to: Date };\r\n  isSubmitting: boolean;\r\n  label?: string | React.ReactNode;\r\n  placeholder?: string;\r\n  formLabelProps?: React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>;\r\n  onChangeCallBack: (e: DateRange | undefined) => void;\r\n  required?: boolean;\r\n} & Omit<ComponentProps<typeof DayPicker>, \"selected\" | \"onSelect\" | \"mode\">;\r\n\r\nconst FormDateRangePickerPortal = ({\r\n  defaultValues,\r\n  isSubmitting,\r\n  formLabelProps,\r\n  label,\r\n  placeholder = \"Chọn ngày\",\r\n  onChangeCallBack,\r\n  required,\r\n  ...props\r\n}: TFormDateRangePickerPortal) => {\r\n  const form = useForm<z.infer<typeof dateRangerPickerPortalSchema>>({\r\n    resolver: zodResolver(dateRangerPickerPortalSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    form.reset({ dateRange: defaultValues });\r\n  }, [defaultValues.from, defaultValues.to]);\r\n\r\n  useEffect(() => {\r\n    if (isSubmitting) {\r\n      form.trigger(\"dateRange\");\r\n    }\r\n  }, [isSubmitting]);\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <FormField\r\n        control={form.control}\r\n        name={\"dateRange\"}\r\n        render={({ field: { value, onChange, ...fieldProps } }) => (\r\n          <FormItem>\r\n            {label && (\r\n              <FormLabel {...formLabelProps}>\r\n                {label}\r\n                {required && <span className=\"text-destructive\">*</span>}\r\n              </FormLabel>\r\n            )}\r\n            <Popover\r\n              onOpenChange={(open) => !open && form.trigger(\"dateRange\")}\r\n            >\r\n              <PopoverTrigger asChild>\r\n                <FormControl>\r\n                  <Button\r\n                    variant={\"outline\"}\r\n                    className={cn(\r\n                      \"w-full pl-3 text-left font-normal justify-start\",\r\n                      \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aria-invalid:bg-[#FEF2F2]\",\r\n                      !value && \"text-muted-foreground\"\r\n                    )}\r\n                  >\r\n                    <MyIconfy icon={commonIcon.calendar} size=\"sm\" />\r\n                    {value?.from ? (\r\n                      value.to ? (\r\n                        <>\r\n                          {format(value.from, \"dd/MM/yyyy\")} -{\" \"}\r\n                          {format(value.to, \"dd/MM/yyyy\")}\r\n                        </>\r\n                      ) : (\r\n                        format(value.from, \"dd/MM/yyyy\")\r\n                      )\r\n                    ) : (\r\n                      <span>{placeholder}</span>\r\n                    )}\r\n                  </Button>\r\n                </FormControl>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                <Calendar\r\n                  mode=\"range\"\r\n                  selected={value}\r\n                  onSelect={(e) => {\r\n                    onChangeCallBack(e);\r\n                    onChange(e);\r\n                  }}\r\n                  initialFocus\r\n                  {...fieldProps}\r\n                  {...props}\r\n                />\r\n              </PopoverContent>\r\n            </Popover>\r\n            <FormMessage />\r\n          </FormItem>\r\n        )}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n",
      "path": "block/form/form-date-range-picker.tsx",
      "target": "components/block/form/form-date-range-picker.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  Icon,\r\n  IconifyIconHTMLElement,\r\n  IconifyIconProps,\r\n} from \"@iconify-icon/react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst myIconVariants = cva(\"inline-flex\", {\r\n  variants: {\r\n    variant: {\r\n      primary: \"text-primary\",\r\n      secondary: \"text-secondary\",\r\n      white: \"text-white\",\r\n      danger: \"text-red-500\",\r\n    },\r\n    size: {\r\n      sm: \"h-4 w-4\", // size small\r\n      md: \"h-6 w-6\", // size medium\r\n      lg: \"h-8 w-8\", // size large\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    // variant: \"primary\",\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\nexport interface IconfyProps\r\n  extends Omit<IconifyIconProps, \"size\" | \"ref\">,\r\n    VariantProps<typeof myIconVariants> {}\r\n\r\nconst MyIconfy = React.forwardRef<IconifyIconHTMLElement, IconfyProps>(\r\n  ({ className, variant, size, icon, ...props }, ref) => {\r\n    return (\r\n      <Icon\r\n        icon={icon}\r\n        ref={ref}\r\n        height=\"none\"\r\n        className={cn(myIconVariants({ variant, size, className }))}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nMyIconfy.displayName = \"MyIconfy\";\r\n\r\nexport { MyIconfy, myIconVariants };\r\n",
      "path": "block/base-component/my-icon.tsx",
      "target": "components/block/base-component/my-icon.tsx"
    },
    {
      "type": "registry:block",
      "content": "export const commonIcon = {\r\n  add: \"ic:round-add\",\r\n  edit: \"ic:round-edit\",\r\n  delete: \"ic:round-delete\",\r\n  filter: \"ic:round-filter-list\",\r\n  sort: \"ic:round-sort\",\r\n  close: \"ic:round-close\",\r\n  check: \"lucide:check\",\r\n  save: \"ic:round-save\",\r\n  cancel: \"ic:round-cancel\",\r\n  checkCircle: \"ic:round-check-circle\",\r\n  calendar: \"lucide:calendar\",\r\n  chevronDown: \"lucide:chevron-down\",\r\n  chevronUp: \"lucide:chevron-up\",\r\n  chevronLeft: \"lucide:chevron-left\",\r\n  chevronRight: \"lucide:chevron-right\",\r\n  loader: \"lucide:loader-circle\",\r\n  searchIcon: \"lucide:search\",\r\n  x: \"lucide:x\",\r\n  circle: \"lucide:circle\",\r\n  sparkles: \"lucide:sparkles\",\r\n  circleAlert: \"lucide:circle-alert\",\r\n};\r\n",
      "path": "block/common-icon.tsx",
      "target": "components/block/common-icon.tsx"
    }
  ]
}