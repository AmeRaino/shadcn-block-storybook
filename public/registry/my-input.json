{
  "name": "my-input",
  "type": "registry:block",
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "import * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { useId } from \"react\";\r\n\r\ntype TProps = {\r\n  prefix?: React.ReactNode;\r\n  suffix?: React.ReactNode;\r\n  wrapperContainerProps?: React.ComponentProps<\"div\">;\r\n} & Omit<React.ComponentProps<typeof Input>, \"prefix\" | \"ref\">;\r\n\r\nfunction MyInput({\r\n  className,\r\n  suffix,\r\n  prefix,\r\n  children,\r\n  wrapperContainerProps,\r\n  ...props\r\n}: TProps) {\r\n  const { className: wrapperContainerClassName, ...restWrapperContainerProps } =\r\n    wrapperContainerProps || {};\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"relative flex-1\", wrapperContainerClassName)}\r\n      {...restWrapperContainerProps}\r\n    >\r\n      <Input\r\n        className={cn(\r\n          \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aria-invalid:text-destructive aria-invalid:bg-[#FEF2F2]\",\r\n          \"peer\",\r\n          prefix && \"ps-9\",\r\n          suffix && \"pe-9\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n      {prefix && (\r\n        <span className=\"[&>svg]:size-4 text-muted-foreground pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 text-sm peer-disabled:opacity-50\">\r\n          {prefix}\r\n        </span>\r\n      )}\r\n      {suffix && (\r\n        <span className=\"[&>svg]:size-4 text-muted-foreground pointer-events-none absolute inset-y-0 end-0 flex items-center justify-center pe-3 text-sm peer-disabled:opacity-50\">\r\n          {suffix}\r\n        </span>\r\n      )}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MyFloatingLabel = ({\r\n  className,\r\n  float = false,\r\n  ...props\r\n}: React.ComponentProps<typeof Label> & { float?: boolean }) => {\r\n  return (\r\n    <Label\r\n      className={cn(\r\n        \"absolute start-2 top-2 z-10 origin-[0] -translate-y-4 scale-75 transform bg-background px-2 text-sm text-gray-500 duration-300\",\r\n        !float && [\r\n          \"peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100\",\r\n          \"peer-focus:top-2 peer-focus:-translate-y-5 peer-focus:scale-75 peer-focus:px-2\",\r\n        ],\r\n        float && \"top-2 -translate-y-5 scale-75 px-2\",\r\n        \"dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\nMyFloatingLabel.displayName = \"MyFloatingLabel\";\r\n\r\nconst MyFloatingLabelInput = ({\r\n  label,\r\n  placeholder = \"\",\r\n  float = false,\r\n  ...props\r\n}: React.ComponentProps<typeof Input> & {\r\n  label?: string | React.ReactNode;\r\n  float?: boolean;\r\n}) => {\r\n  const id = useId();\r\n  const { className: inputClassName, ...restInputProps } = props || {};\r\n\r\n  return (\r\n    <MyInput\r\n      id={id}\r\n      placeholder={placeholder}\r\n      className={cn(\r\n        !float && \"placeholder:opacity-0 focus:placeholder:opacity-100\",\r\n        inputClassName\r\n      )}\r\n      {...restInputProps}\r\n    >\r\n      <MyFloatingLabel htmlFor={id} float={float}>\r\n        {label}\r\n      </MyFloatingLabel>\r\n    </MyInput>\r\n  );\r\n};\r\nMyFloatingLabelInput.displayName = \"MyFloatingLabelInput\";\r\n\r\nexport { MyInput, MyFloatingLabel, MyFloatingLabelInput };\r\n",
      "path": "block/base-component/my-input.tsx",
      "target": "components/block/base-component/my-input.tsx"
    }
  ]
}