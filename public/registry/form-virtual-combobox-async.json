{
  "name": "form-virtual-combobox-async",
  "type": "registry:block",
  "registryDependencies": [
    "form",
    "button",
    "command",
    "popover"
  ],
  "dependencies": [
    "@tanstack/react-virtual",
    "@tanstack/react-query"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { ComponentProps } from \"react\";\r\nimport { Control, FieldPath, FieldValues } from \"react-hook-form\";\r\n\r\nimport {\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { MyVirtualComboboxAsync } from \"../base-component/my-virtual-combobox-async\";\r\n\r\ntype TFormVirtualComboboxAsync<\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData,\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TFieldName;\r\n  control: Control<TFieldValues>;\r\n  label?: string;\r\n  formLabelProps?: React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>;\r\n} & Omit<\r\n  ComponentProps<typeof MyVirtualComboboxAsync<TData, TValue, TLabel>>,\r\n  \"selectedState\"\r\n>;\r\n\r\n// Utility function to convert a value to a Set\r\nconst valueToSet = <T,>(value: unknown): Set<T> => {\r\n  if (!value) return new Set<T>();\r\n  if (value instanceof Set) return value as Set<T>;\r\n  return new Set(Array.isArray(value) ? value : [value]);\r\n};\r\n\r\nexport const FormVirtualComboboxAsync = <\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData,\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  name,\r\n  control,\r\n  label,\r\n  formLabelProps,\r\n  triggerProps,\r\n  height = \"400px\",\r\n  placeholder = \"\",\r\n  searchPlaceholder = \"Tìm kiếm...\",\r\n  emptyMessage = \"Không có dữ liệu\",\r\n  options,\r\n  select = {\r\n    value: \"Id\" as TValue,\r\n    label: \"Name\" as TLabel,\r\n  },\r\n  allowClear = true,\r\n  loading = false,\r\n  truncate = 3,\r\n  badgeProps,\r\n  infiniteQueryProps,\r\n  openControllerProps,\r\n  renderLabel,\r\n  onChangeCallBack,\r\n  renderTrigger,\r\n  mode = \"single\",\r\n}: TFormVirtualComboboxAsync<\r\n  TData,\r\n  TValue,\r\n  TLabel,\r\n  TFieldValues,\r\n  TFieldName\r\n>) => {\r\n  return (\r\n    <FormField\r\n      control={control}\r\n      name={name}\r\n      render={({ field }) => {\r\n        // Convert field.value to a Set using the utility function\r\n        const valuesSet = valueToSet<TData[TValue]>(field.value);\r\n        const selectedState: readonly [\r\n          Set<TData[TValue]>,\r\n          {\r\n            readonly add: (key: TData[TValue]) => void;\r\n            readonly remove: (key: TData[TValue]) => void;\r\n            readonly reset: () => void;\r\n          }\r\n        ] = [\r\n          valuesSet,\r\n          {\r\n            add: (value: TData[TValue]) => {\r\n              const newValues = new Set(valuesSet);\r\n              newValues.add(value);\r\n              field.onChange(mode === \"single\" ? value : newValues);\r\n              onChangeCallBack?.({\r\n                eventSelect: true,\r\n                value,\r\n                values: newValues,\r\n              });\r\n            },\r\n            remove: (value: TData[TValue]) => {\r\n              const newValues = new Set(valuesSet);\r\n              newValues.delete(value);\r\n              field.onChange(mode === \"single\" ? null : newValues);\r\n              onChangeCallBack?.({\r\n                eventSelect: false,\r\n                value,\r\n                values: newValues,\r\n              });\r\n            },\r\n            reset: () => {\r\n              field.onChange(\r\n                mode === \"single\" ? null : new Set<TData[TValue]>()\r\n              );\r\n            },\r\n          },\r\n        ];\r\n\r\n        return (\r\n          <FormItem className=\"flex flex-col\">\r\n            {label && <FormLabel {...formLabelProps}>{label}</FormLabel>}\r\n            <FormControl>\r\n              <div className=\"group\">\r\n                <MyVirtualComboboxAsync\r\n                  selectedState={selectedState}\r\n                  openControllerProps={openControllerProps}\r\n                  height={height}\r\n                  triggerProps={triggerProps}\r\n                  placeholder={placeholder}\r\n                  searchPlaceholder={searchPlaceholder}\r\n                  emptyMessage={emptyMessage}\r\n                  options={options}\r\n                  select={select}\r\n                  allowClear={allowClear}\r\n                  loading={loading}\r\n                  truncate={truncate}\r\n                  badgeProps={badgeProps}\r\n                  infiniteQueryProps={infiniteQueryProps}\r\n                  renderLabel={renderLabel}\r\n                  onChangeCallBack={onChangeCallBack}\r\n                  renderTrigger={renderTrigger}\r\n                  mode={mode}\r\n                />\r\n              </div>\r\n            </FormControl>\r\n            <FormMessage />\r\n          </FormItem>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n",
      "path": "block/form/form-virtual-combobox-async.tsx",
      "target": "components/block/form/form-virtual-combobox-async.tsx"
    },
    {
      "type": "registry:block",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport useSet from \"@/hook/useSet\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { commonIcon } from \"../common-icon\";\r\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\r\nimport * as React from \"react\";\r\nimport { ComponentProps, useEffect, useMemo } from \"react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { MyIconfy } from \"./my-icon\";\r\nimport { useInfiniteQuery } from \"@tanstack/react-query\";\r\nimport { useBoolean } from \"@/hook/useBoolean\";\r\n\r\ntype TInfiniteQueryProps = {\r\n  query: Omit<ReturnType<typeof useInfiniteQuery>, \"data\">;\r\n  onSearch: (value: string) => void;\r\n};\r\n\r\ntype TOnChangeCallBackParams<T> = {\r\n  eventSelect: boolean;\r\n  value: T;\r\n  values: ReturnType<typeof useSet<T>>[\"0\"];\r\n};\r\n\r\ntype TSelectMode = \"single\" | \"multiple\";\r\n\r\ntype TMyVirtualComboboxAsyncProps<\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData\r\n> = {\r\n  height?: string;\r\n  selectedState: ReturnType<typeof useSet<TData[TValue]>>;\r\n  options?: TData[];\r\n  select: { value: TValue; label: TLabel };\r\n  truncate?: number;\r\n  allowClear?: boolean;\r\n  loading?: boolean;\r\n  placeholder?: string;\r\n  searchPlaceholder?: string;\r\n  emptyMessage?: string;\r\n  triggerProps?: ComponentProps<\"button\">;\r\n  badgeProps?: React.ComponentPropsWithoutRef<typeof Badge>;\r\n  infiniteQueryProps: TInfiniteQueryProps;\r\n  openControllerProps: ReturnType<typeof useBoolean>;\r\n  renderLabel?: (option: TData) => string | React.ReactNode;\r\n  onChangeCallBack?: (params: TOnChangeCallBackParams<TData[TValue]>) => void;\r\n  renderTrigger?: (\r\n    props: TMyVirtualComboboxTriggerProps<TData, TValue, TLabel>\r\n  ) => React.ReactNode;\r\n  mode?: TSelectMode;\r\n};\r\n\r\nexport function MyVirtualComboboxAsync<\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData\r\n>({\r\n  selectedState,\r\n  height = \"400px\",\r\n  triggerProps,\r\n  placeholder = \"\",\r\n  searchPlaceholder = \"Tìm kiếm...\",\r\n  emptyMessage = \"Không có dữ liệu\",\r\n  options = [],\r\n  select = {\r\n    value: \"Id\" as TValue,\r\n    label: \"Name\" as TLabel,\r\n  },\r\n  allowClear = true,\r\n  loading = false,\r\n  truncate,\r\n  badgeProps,\r\n  infiniteQueryProps,\r\n  openControllerProps,\r\n  renderLabel,\r\n  onChangeCallBack,\r\n  renderTrigger,\r\n  mode = \"single\",\r\n}: TMyVirtualComboboxAsyncProps<TData, TValue, TLabel>) {\r\n  const [selectedValues, selectedValuesActions] = selectedState;\r\n\r\n  const { className: triggerClassName, ...restTriggerProps } =\r\n    triggerProps || {};\r\n\r\n  const onClear = () => {\r\n    selectedValuesActions.reset();\r\n  };\r\n\r\n  const onRemoveValue = (value: TData[TValue]) => {\r\n    onChangeCallBack?.({ eventSelect: false, value, values: selectedValues });\r\n    selectedValuesActions.remove(value);\r\n  };\r\n\r\n  const onAddValue = (value: TData[TValue]) => {\r\n    if (mode === \"single\") {\r\n      selectedValuesActions.reset();\r\n    }\r\n\r\n    onChangeCallBack?.({ eventSelect: true, value, values: selectedValues });\r\n    selectedValuesActions.add(value);\r\n\r\n    if (mode === \"single\") {\r\n      openControllerProps.setFalse();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      open={openControllerProps.value}\r\n      onOpenChange={openControllerProps.toggle}\r\n    >\r\n      <PopoverTrigger asChild>\r\n        {renderTrigger ? (\r\n          renderTrigger({\r\n            selectedValues,\r\n            placeholder,\r\n            options,\r\n            select,\r\n            className: triggerClassName,\r\n            open: openControllerProps.value,\r\n            allowClear,\r\n            loading,\r\n            truncate,\r\n            badgeProps,\r\n            onClear,\r\n            onRemoveValue,\r\n            mode,\r\n            ...restTriggerProps,\r\n          })\r\n        ) : (\r\n          <MyVirtualComboboxTrigger\r\n            truncate={truncate}\r\n            badgeProps={badgeProps}\r\n            loading={loading}\r\n            allowClear={allowClear}\r\n            selectedValues={selectedValues}\r\n            placeholder={placeholder}\r\n            options={options}\r\n            select={select}\r\n            className={triggerClassName}\r\n            open={openControllerProps.value}\r\n            buttonProps={restTriggerProps}\r\n            onClear={onClear}\r\n            onRemoveValue={onRemoveValue}\r\n            mode={mode}\r\n          />\r\n        )}\r\n      </PopoverTrigger>\r\n      <PopoverContent\r\n        className=\"p-0 w-full\"\r\n        style={{ width: \"var(--radix-popover-trigger-width)\" }}\r\n      >\r\n        <MyVirtualComboboxContent\r\n          height={height}\r\n          emptyMessage={emptyMessage}\r\n          filteredOptions={options}\r\n          searchPlaceholder={searchPlaceholder}\r\n          select={select}\r\n          selectedValues={selectedValues}\r\n          infiniteQueryProps={infiniteQueryProps}\r\n          onAddValue={onAddValue}\r\n          onRemoveValue={onRemoveValue}\r\n          renderLabel={renderLabel}\r\n          mode={mode}\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\ntype TMyVirtualComboboxContentProps<\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData\r\n> = {\r\n  height: string;\r\n  selectedValues: ReturnType<typeof useSet<TData[TValue]>>[0];\r\n  filteredOptions: TData[];\r\n  select: { value: TValue; label: TLabel };\r\n  searchPlaceholder?: string;\r\n  emptyMessage?: string;\r\n  infiniteQueryProps: TInfiniteQueryProps;\r\n  onAddValue: (key: TData[TValue]) => void;\r\n  onRemoveValue: (key: TData[TValue]) => void;\r\n  renderLabel?: (option: TData) => string | React.ReactNode;\r\n  onChangeCallBack?: (params: TOnChangeCallBackParams<TData[TValue]>) => void;\r\n  mode?: TSelectMode;\r\n};\r\n\r\nconst MyVirtualComboboxContent = <\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData\r\n>({\r\n  height,\r\n  searchPlaceholder,\r\n  emptyMessage,\r\n  filteredOptions,\r\n  select,\r\n  selectedValues,\r\n  infiniteQueryProps,\r\n  onChangeCallBack,\r\n  onAddValue,\r\n  onRemoveValue,\r\n  renderLabel,\r\n  mode = \"multiple\",\r\n}: TMyVirtualComboboxContentProps<TData, TValue, TLabel>) => {\r\n  const parentRef = React.useRef(null);\r\n  const { isLoading, hasNextPage, isFetchingNextPage, fetchNextPage } =\r\n    infiniteQueryProps.query;\r\n\r\n  const totalCount = filteredOptions.length;\r\n\r\n  const virtualizer = useVirtualizer({\r\n    count: hasNextPage ? totalCount + 1 : totalCount,\r\n    getScrollElement: () => parentRef.current,\r\n    estimateSize: () => 35,\r\n  });\r\n\r\n  const virtualOptions = virtualizer.getVirtualItems();\r\n  const lastVirtualItem = virtualizer.getVirtualItems().at(-1);\r\n\r\n  useEffect(() => {\r\n    // Check if we need to load more items\r\n    const isLastItemVisible =\r\n      lastVirtualItem &&\r\n      !isFetchingNextPage &&\r\n      hasNextPage &&\r\n      lastVirtualItem.index >= totalCount - 1;\r\n\r\n    if (isLastItemVisible) {\r\n      fetchNextPage();\r\n    }\r\n  }, [\r\n    lastVirtualItem,\r\n    isFetchingNextPage,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    totalCount,\r\n  ]);\r\n\r\n  return (\r\n    <Command shouldFilter={false}>\r\n      <CommandInput\r\n        onValueChange={infiniteQueryProps.onSearch}\r\n        placeholder={searchPlaceholder}\r\n      />\r\n      <CommandList\r\n        ref={parentRef}\r\n        style={{\r\n          height: height,\r\n          width: \"100%\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        <CommandEmpty>\r\n          {isLoading ? (\r\n            <MyIconfy\r\n              icon={commonIcon.loader}\r\n              className=\"animate-spin\"\r\n              size=\"sm\"\r\n            />\r\n          ) : (\r\n            emptyMessage\r\n          )}\r\n        </CommandEmpty>\r\n        <CommandGroup>\r\n          <div\r\n            style={{\r\n              height: `${virtualizer.getTotalSize()}px`,\r\n              width: \"100%\",\r\n              position: \"relative\",\r\n            }}\r\n          >\r\n            {virtualOptions.map((virtualOption) => {\r\n              const isLoaderRow = virtualOption.index >= totalCount;\r\n              const optionValue = isLoaderRow\r\n                ? null\r\n                : filteredOptions[virtualOption.index][select.value];\r\n\r\n              const optionLabel = isLoaderRow\r\n                ? null\r\n                : filteredOptions[virtualOption.index][select.label];\r\n\r\n              const isSelected = optionValue\r\n                ? selectedValues.has(optionValue)\r\n                : false;\r\n              const coerceStringValue = String(optionValue);\r\n\r\n              return (\r\n                <CommandItem\r\n                  key={coerceStringValue}\r\n                  className={cn(\r\n                    \"absolute left-0 top-0 w-full bg-transparent\",\r\n                    isLoaderRow\r\n                      ? \"flex items-center justify-center\"\r\n                      : \"hover:bg-gray-50 transition-colors flex items-center\"\r\n                  )}\r\n                  style={{\r\n                    height: `${virtualOption.size}px`,\r\n                    transform: `translateY(${virtualOption.start}px)`,\r\n                  }}\r\n                  value={coerceStringValue}\r\n                  onSelect={(currentValue) => {\r\n                    const coerceCurrentValue =\r\n                      typeof optionValue === \"string\"\r\n                        ? currentValue\r\n                        : Number(currentValue);\r\n\r\n                    if (mode === \"single\" || !isSelected) {\r\n                      onAddValue(coerceCurrentValue as TData[TValue]);\r\n                    } else if (isSelected) {\r\n                      onRemoveValue(coerceCurrentValue as TData[TValue]);\r\n                    }\r\n\r\n                    const newSet = new Set(selectedValues);\r\n                    if (mode === \"single\") {\r\n                      newSet.clear();\r\n                      newSet.add(coerceCurrentValue as TData[TValue]);\r\n                      onChangeCallBack?.({\r\n                        eventSelect: true,\r\n                        value: coerceCurrentValue as TData[TValue],\r\n                        values: newSet,\r\n                      });\r\n                    } else if (isSelected) {\r\n                      onChangeCallBack?.({\r\n                        eventSelect: false,\r\n                        value: coerceCurrentValue as TData[TValue],\r\n                        values: newSet,\r\n                      });\r\n                      newSet.delete(coerceCurrentValue as TData[TValue]);\r\n                    } else {\r\n                      onChangeCallBack?.({\r\n                        eventSelect: true,\r\n                        value: coerceCurrentValue as TData[TValue],\r\n                        values: newSet,\r\n                      });\r\n                      newSet.add(coerceCurrentValue as TData[TValue]);\r\n                    }\r\n                  }}\r\n                >\r\n                  {isLoaderRow\r\n                    ? isFetchingNextPage && (\r\n                        <MyIconfy\r\n                          icon={commonIcon.loader}\r\n                          className=\"animate-spin\"\r\n                          size=\"sm\"\r\n                        />\r\n                      )\r\n                    : optionLabel && (\r\n                        <>\r\n                          <div className=\"flex-1 truncate pr-2\">\r\n                            {renderLabel\r\n                              ? renderLabel(\r\n                                  filteredOptions[virtualOption.index]\r\n                                )\r\n                              : (filteredOptions[virtualOption.index][\r\n                                  select.label\r\n                                ] as string)}\r\n                          </div>\r\n                          <MyIconfy\r\n                            icon={commonIcon.check}\r\n                            className={cn(\r\n                              \"ml-auto h-4 w-4 shrink-0\",\r\n                              isSelected ? \"opacity-100\" : \"opacity-0\"\r\n                            )}\r\n                          />\r\n                        </>\r\n                      )}\r\n                </CommandItem>\r\n              );\r\n            })}\r\n          </div>\r\n        </CommandGroup>\r\n      </CommandList>\r\n    </Command>\r\n  );\r\n};\r\n\r\ntype TMyVirtualComboboxTriggerProps<\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData\r\n> = {\r\n  truncate?: number;\r\n  badgeProps?: React.ComponentPropsWithoutRef<typeof Badge>;\r\n  loading?: boolean;\r\n  selectedValues: ReturnType<typeof useSet<TData[TValue]>>[0];\r\n  options: TData[];\r\n  select: { value: TValue; label: TLabel };\r\n  placeholder: string;\r\n  className?: string;\r\n  open: boolean;\r\n  buttonProps?: React.ComponentPropsWithoutRef<typeof Button>;\r\n  allowClear?: boolean;\r\n  onClear: () => void;\r\n  onRemoveValue?: (value: TData[TValue]) => void;\r\n  mode?: TSelectMode;\r\n} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"value\">;\r\n\r\nexport const MyVirtualComboboxTrigger = <\r\n  TData,\r\n  TValue extends keyof TData = keyof TData,\r\n  TLabel extends keyof TData = keyof TData\r\n>({\r\n  truncate = 3,\r\n  badgeProps,\r\n  loading = false,\r\n  selectedValues,\r\n  placeholder,\r\n  options,\r\n  select,\r\n  className,\r\n  open,\r\n  buttonProps,\r\n  allowClear = true,\r\n  onClear,\r\n  onRemoveValue,\r\n  mode = \"multiple\",\r\n  ...props\r\n}: TMyVirtualComboboxTriggerProps<TData, TValue, TLabel>) => {\r\n  const { className: badgeClassName, ...restBadgeProps } = badgeProps || {};\r\n\r\n  const displayData = useMemo(() => {\r\n    const hasValues = selectedValues.size > 0;\r\n\r\n    const selectedOptions = options.filter((option) =>\r\n      selectedValues.has(option[select.value])\r\n    );\r\n\r\n    const visibleOptions = selectedOptions.slice(0, truncate);\r\n    const remainingCount = selectedOptions.length - truncate;\r\n\r\n    return {\r\n      hasValues,\r\n      isEmpty: selectedOptions.length === 0,\r\n      selectedOptions,\r\n      visibleOptions,\r\n      remainingCount: remainingCount > 0 ? remainingCount : 0,\r\n    };\r\n  }, [selectedValues, options, select.value, truncate]);\r\n\r\n  return (\r\n    <Button\r\n      type=\"button\"\r\n      variant=\"outline\"\r\n      role=\"combobox\"\r\n      aria-expanded={open}\r\n      className={cn(\r\n        \"group relative w-full text-left justify-start h-auto\",\r\n        \"group-aria-invalid:ring-destructive/20 dark:group-aria-invalid:ring-destructive/40 group-aria-invalid:border-destructive group-aria-invalid:bg-[#FEF2F2]\",\r\n        className\r\n      )}\r\n      {...buttonProps}\r\n      {...props}\r\n    >\r\n      {!displayData.hasValues || displayData.isEmpty ? (\r\n        <p className=\"opacity-50\">{placeholder}</p>\r\n      ) : mode === \"single\" ? (\r\n        <div className=\"flex items-center py-1 pr-6 overflow-hidden w-full\">\r\n          <span className=\"truncate\">\r\n            {displayData.selectedOptions[0]\r\n              ? String(displayData.selectedOptions[0][select.label])\r\n              : placeholder}\r\n          </span>\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex flex-wrap gap-1 items-start py-1 pr-6 overflow-hidden w-full\">\r\n          {displayData.visibleOptions.map((option) => {\r\n            const optionValue = option[select.value];\r\n            const label = String(option[select.label]);\r\n\r\n            return (\r\n              <Badge\r\n                key={String(optionValue)}\r\n                className={cn(\r\n                  \"inline-flex items-center gap-1 px-2 py-0.5 rounded-md text-xs cursor-default border-transparent bg-muted text-foreground hover:bg-muted max-w-[100px]\",\r\n                  badgeClassName\r\n                )}\r\n                {...restBadgeProps}\r\n              >\r\n                <span className=\"truncate\">{label}</span>\r\n                <MyIconfy\r\n                  size=\"sm\"\r\n                  icon={commonIcon.close}\r\n                  className=\"h-3.5 w-3.5 cursor-pointer opacity-70 hover:opacity-100\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n\r\n                    onRemoveValue?.(optionValue as TData[TValue]);\r\n                  }}\r\n                />\r\n              </Badge>\r\n            );\r\n          })}\r\n\r\n          {displayData.remainingCount > 0 && (\r\n            <div className=\"text-sm font-medium text-muted-foreground\">\r\n              +{displayData.remainingCount}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <MyIconfy\r\n        icon={loading ? commonIcon.loader : commonIcon.chevronDown}\r\n        className={cn(\r\n          \"ml-auto h-4 w-4 opacity-50 shrink-0\",\r\n          displayData.hasValues && allowClear && \"group-hover:opacity-0\",\r\n          loading && \"animate-spin\"\r\n        )}\r\n      />\r\n      <MyIconfy\r\n        size=\"sm\"\r\n        icon={commonIcon.cancel}\r\n        className={cn(\r\n          \"text-neutral-400 h-4 w-4 absolute right-2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 transition-opacity\",\r\n          displayData.hasValues &&\r\n            allowClear &&\r\n            \"group-hover:opacity-100 cursor-pointer\"\r\n        )}\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          onClear();\r\n        }}\r\n      />\r\n    </Button>\r\n  );\r\n};\r\n\r\nMyVirtualComboboxTrigger.displayName = \"MyVirtualComboboxTrigger\";\r\n\r\nexport const MyVirtualComboboxTriggerLabel = ({\r\n  children,\r\n  ...props\r\n}: {\r\n  children: React.ReactNode;\r\n} & React.ComponentPropsWithoutRef<\"span\">) => {\r\n  return (\r\n    <span className=\"overflow-hidden text-ellipsis flex-1\" {...props}>\r\n      {children}\r\n    </span>\r\n  );\r\n};\r\n\r\nMyVirtualComboboxTriggerLabel.displayName = \"MyVirtualComboboxTriggerLabel\";\r\n",
      "path": "block/base-component/my-virtual-combobox-async.tsx",
      "target": "components/block/base-component/my-virtual-combobox-async.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  Icon,\r\n  IconifyIconHTMLElement,\r\n  IconifyIconProps,\r\n} from \"@iconify-icon/react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst myIconVariants = cva(\"inline-flex\", {\r\n  variants: {\r\n    variant: {\r\n      primary: \"text-primary\",\r\n      secondary: \"text-secondary\",\r\n      white: \"text-white\",\r\n      danger: \"text-red-500\",\r\n    },\r\n    size: {\r\n      sm: \"h-4 w-4\", // size small\r\n      md: \"h-6 w-6\", // size medium\r\n      lg: \"h-8 w-8\", // size large\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    // variant: \"primary\",\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\nexport interface IconfyProps\r\n  extends Omit<IconifyIconProps, \"size\" | \"ref\">,\r\n    VariantProps<typeof myIconVariants> {}\r\n\r\nconst MyIconfy = React.forwardRef<IconifyIconHTMLElement, IconfyProps>(\r\n  ({ className, variant, size, icon, ...props }, ref) => {\r\n    return (\r\n      <Icon\r\n        icon={icon}\r\n        ref={ref}\r\n        height=\"none\"\r\n        className={cn(myIconVariants({ variant, size, className }))}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nMyIconfy.displayName = \"MyIconfy\";\r\n\r\nexport { MyIconfy, myIconVariants };\r\n",
      "path": "block/base-component/my-icon.tsx",
      "target": "components/block/base-component/my-icon.tsx"
    },
    {
      "type": "registry:block",
      "content": "export const commonIcon = {\r\n  add: \"ic:round-add\",\r\n  edit: \"ic:round-edit\",\r\n  delete: \"ic:round-delete\",\r\n  filter: \"ic:round-filter-list\",\r\n  sort: \"ic:round-sort\",\r\n  close: \"ic:round-close\",\r\n  check: \"lucide:check\",\r\n  save: \"ic:round-save\",\r\n  cancel: \"ic:round-cancel\",\r\n  checkCircle: \"ic:round-check-circle\",\r\n  calendar: \"lucide:calendar\",\r\n  chevronDown: \"lucide:chevron-down\",\r\n  chevronUp: \"lucide:chevron-up\",\r\n  chevronLeft: \"lucide:chevron-left\",\r\n  chevronRight: \"lucide:chevron-right\",\r\n  loader: \"lucide:loader-circle\",\r\n  searchIcon: \"lucide:search\",\r\n  x: \"lucide:x\",\r\n  circle: \"lucide:circle\",\r\n  sparkles: \"lucide:sparkles\",\r\n  circleAlert: \"lucide:circle-alert\",\r\n};\r\n",
      "path": "block/common-icon.tsx",
      "target": "components/block/common-icon.tsx"
    },
    {
      "content": "import { useCallback, useState } from 'react'\r\n\r\nimport type { Dispatch, SetStateAction } from 'react'\r\n\r\ntype TUseBooleanReturn = {\r\n\tvalue: boolean\r\n\tsetValue: Dispatch<SetStateAction<boolean>>\r\n\tsetTrue: () => void\r\n\tsetFalse: () => void\r\n\ttoggle: () => void\r\n}\r\n\r\nexport function useBoolean(defaultValue: boolean = false): TUseBooleanReturn {\r\n\tconst [value, setValue] = useState(defaultValue)\r\n\r\n\tconst setTrue = useCallback(() => {\r\n\t\tsetValue(true)\r\n\t}, [])\r\n\r\n\tconst setFalse = useCallback(() => {\r\n\t\tsetValue(false)\r\n\t}, [])\r\n\r\n\tconst toggle = useCallback(() => {\r\n\t\tsetValue((x) => !x)\r\n\t}, [])\r\n\r\n\treturn { value, setValue, setTrue, setFalse, toggle }\r\n}\r\n",
      "path": "hook/useBoolean.ts",
      "target": "components/hook/useBoolean.ts"
    },
    {
      "content": "import { useState } from \"react\";\r\n\r\nfunction useSet<K>(initialValue?: Iterable<K>) {\r\n  const getInitValue = () => new Set(initialValue);\r\n  const [set, setSet] = useState<Set<K>>(getInitValue);\r\n\r\n  const add = (key: K) => {\r\n    if (set.has(key)) {\r\n      return;\r\n    }\r\n    setSet((prevSet) => {\r\n      const temp = new Set(prevSet);\r\n      temp.add(key);\r\n      return temp;\r\n    });\r\n  };\r\n\r\n  const remove = (key: K) => {\r\n    if (!set.has(key)) {\r\n      return;\r\n    }\r\n    setSet((prevSet) => {\r\n      const temp = new Set(prevSet);\r\n      temp.delete(key);\r\n      return temp;\r\n    });\r\n  };\r\n\r\n  const reset = () => setSet(getInitValue());\r\n\r\n  return [\r\n    set,\r\n    {\r\n      add,\r\n      remove,\r\n      reset,\r\n    },\r\n  ] as const;\r\n}\r\n\r\nexport default useSet;\r\n",
      "path": "hook/useSet.ts",
      "target": "components/hook/useSet.ts"
    }
  ]
}