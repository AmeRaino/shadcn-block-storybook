{
  "name": "form-select",
  "type": "registry:block",
  "registryDependencies": [
    "form",
    "select"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { SelectProps, SelectTriggerProps } from \"@radix-ui/react-select\";\r\nimport { Control, FieldPath, FieldValues } from \"react-hook-form\";\r\n\r\nimport {\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype TMapOption<T> = {\r\n  value: keyof T;\r\n  label: keyof T;\r\n};\r\n\r\ntype TFormSelect<\r\n  TData,\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TFieldName;\r\n  control: Control<TFieldValues>;\r\n  label?: string;\r\n  formLabelProps?: React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>;\r\n  placeholder?: string;\r\n  triggerProps?: SelectTriggerProps;\r\n  options: TData[];\r\n  select?: TMapOption<TData>;\r\n  renderLabel?: (option: TData) => string | React.ReactNode;\r\n  onChangeCallBack?: (value: string) => void | string;\r\n} & Omit<SelectProps, \"onValueChange\" | \"value\">;\r\n\r\nexport const FormSelect = <\r\n  TData,\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  children,\r\n  triggerProps,\r\n  formLabelProps,\r\n  name,\r\n  control,\r\n  label,\r\n  placeholder,\r\n  options,\r\n  select = {\r\n    value: \"Id\" as keyof TData,\r\n    label: \"Name\" as keyof TData,\r\n  },\r\n  renderLabel,\r\n  onChangeCallBack,\r\n  ...props\r\n}: TFormSelect<TData, TFieldValues, TFieldName>) => {\r\n  const { className, ...restTriggerProps } = triggerProps || {};\r\n\r\n  return (\r\n    <FormField\r\n      control={control}\r\n      name={name}\r\n      render={({ field }) => (\r\n        <FormItem>\r\n          {label && <FormLabel {...formLabelProps}>{label}</FormLabel>}\r\n          <Select\r\n            {...props}\r\n            onValueChange={(e) => {\r\n              if (typeof onChangeCallBack !== \"function\") {\r\n                field.onChange(e);\r\n                return;\r\n              }\r\n\r\n              const formatValue = onChangeCallBack(e);\r\n              field.onChange(typeof formatValue === \"string\" ? formatValue : e);\r\n            }}\r\n          >\r\n            <FormControl>\r\n              <SelectTrigger\r\n                className={cn(\r\n                  \"w-full\",\r\n                  \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aria-invalid:text-destructive aria-invalid:bg-[#FEF2F2]\",\r\n                  className\r\n                )}\r\n                {...restTriggerProps}\r\n              >\r\n                <SelectValue placeholder={placeholder} />\r\n              </SelectTrigger>\r\n            </FormControl>\r\n            <SelectContent>\r\n              {options?.map((option) => (\r\n                <SelectItem\r\n                  key={String(option[select.value])}\r\n                  value={String(option[select.value])}\r\n                >\r\n                  {renderLabel\r\n                    ? renderLabel(option)\r\n                    : String(option[select.label])}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          {children}\r\n          <FormMessage />\r\n        </FormItem>\r\n      )}\r\n    />\r\n  );\r\n};\r\n",
      "path": "block/form/form-select.tsx",
      "target": "components/block/form/form-select.tsx"
    }
  ]
}